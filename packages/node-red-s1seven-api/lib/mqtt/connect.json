{
  "id": "3a077bd68754120e",
  "type": "subflow",
  "name": "MQTT connect",
  "info": "",
  "category": "S1Seven",
  "in": [
    {
      "x": 80,
      "y": 120,
      "wires": [
        {
          "id": "788e91a94bb30617"
        }
      ]
    }
  ],
  "out": [],
  "env": [
    {
      "name": "ApiConfigName",
      "type": "str",
      "value": ""
    },
    {
      "name": "Vhost",
      "type": "str",
      "value": ""
    }
  ],
  "meta": {
    "module": "@s1seven/node-red-s1seven-mqtt",
    "type": "s1seven-mqtt-connect",
    "version": "0.0.1",
    "author": "Edouard <ed@getlarge.eu>",
    "desc": "Node to connect to S1SEVEN MQTT API",
    "license": "Apache-2.0"
  },
  "color": "#BAD3FB",
  "icon": "@s1seven/node-red-s1seven-api/s_icon_logo.svg",
  "status": {
    "x": 820,
    "y": 500,
    "wires": [
      {
        "id": "3b385aaa9d466c36",
        "port": 0
      }
    ]
  },
  "flow": [
    {
      "id": "7e6bf0caea59e270",
      "type": "function",
      "z": "3a077bd68754120e",
      "name": "connect to the broker",
      "func": "const apiConfigNodeName = flow.get('apiConfigNodeName');\nconst vhost = flow.get('vhost');\nconst s1sevenDomain = flow.get('s1sevenDomain');\n\n/** these variables are stored internally by the S1SEVEN get access token node*/\nconst companyId = global.get(`S1SEVEN_COMPANY_ID_${apiConfigNodeName}`);\nconst accessToken = global.get(`S1SEVEN_ACCESS_TOKEN_${apiConfigNodeName}`);\n\nmsg.action = 'connect';\n\n/**\n * configure the MQTT node connection\n * following guidelines to access S1SEVEN Async API\n * @see https://developers.s1seven.com/docs/information#authentication-1\n * @see https://github.com/node-red/node-red/blob/master/packages/node_modules/%40node-red/nodes/core/network/10-mqtt.js\n **/\n\nconst defaultBrokerConfig = {  \n    credentials: { \n        username: '', \n        password: '', \n    },  \n    clientid: 'company_$',\n    url: `mqtts://broker.${s1sevenDomain}:8883`,\n    // broker: `wss://broker.s1seven.dev/ws/mqtt`,\n    usetls: true,\n    verifyservercert: false,\n    force: true,  \n    autoConnect: false,\n    keepalive: 60,\n    cleansession: false\n};\nmsg.broker = { ...defaultBrokerConfig, ...(msg.broker || {}) };\nmsg.broker.credentials = { \n    username: `${vhost}:${companyId}`,\n    password: accessToken\n};\n// const clientIdSuffix = Math.random().toString(16).substr(2, 8);\nconst clientIdSuffix = `(${os.hostname()})-(${os.platform()})-(${os.arch()})`;\nmsg.broker.clientid = `company_${companyId}_node-red-${clientIdSuffix}`;\n\n// allow override of defaultBrokerConfig.url to work with local env\nconst localhosts = ['localhost', '0.0.0.0', '127.0.0.1']\nif (localhosts.includes(s1sevenDomain)) {\n   msg.broker.usetls = false;\n   msg.broker.url = `mqtt://${s1sevenDomain}:1883`;\n} \n/** \n * for some reason credentials are needed at the root of msg.broker \n * to make the connection work\n * @see https://github.com/node-red/node-red/blob/master/packages/node_modules/%40node-red/nodes/core/network/10-mqtt.js#L566\n **/\nmsg.broker = {\n    ...msg.broker,\n    ...msg.broker.credentials,\n}\nreturn msg\n",
      "outputs": 1,
      "noerr": 0,
      "initialize": "",
      "finalize": "",
      "libs": [
        {
          "var": "os",
          "module": "os"
        }
      ],
      "x": 300,
      "y": 340,
      "wires": [["4157b664fac0fb5b"]]
    },
    {
      "id": "8d4b2a81aac3257e",
      "type": "get access token",
      "z": "3a077bd68754120e",
      "name": "",
      "apiConfig": "f5c697734aa054db",
      "x": 330,
      "y": 180,
      "wires": [[], [], ["0bc84f386880dfdc"]]
    },
    {
      "id": "788e91a94bb30617",
      "type": "function",
      "z": "3a077bd68754120e",
      "name": "init",
      "func": "const apiConfigNodeName = flow.get('apiConfigNodeName');\n\nconst accessToken = global.get(`S1SEVEN_ACCESS_TOKEN_${apiConfigNodeName}`);\n\n/** \n * check if an access token is present in the store\n * if yes, directly try to connect\n * otherwise fetch one from the REST API\n **/\nif (accessToken) {\n    return [msg, null];\n}\nreturn [null, msg];\n",
      "outputs": 2,
      "noerr": 0,
      "initialize": "// Code added here will be run once\n// whenever the node is started.\n\n/* get and validate environment variables / subflow configuration */\nif (!env.get('ApiConfigName')) {\n    throw new Error('ApiConfigName is required');\n}\nif (!env.get('Vhost')) {\n    throw new Error('Vhost is required');\n}\nconst apiConfigNodeName = env.get('ApiConfigName').replace(/ /g, \"_\");\nconst vhost = env.get('Vhost');\n\n/** \n * store variables that would only change \n * by updating the subflow configuration\n **/\nflow.set('apiConfigNodeName', apiConfigNodeName);\nflow.set('vhost', vhost);\nflow.set('action', env.get('Action'));\nflow.set('resource', env.get('Resource'));\n//\n//\nconst getDomainWithoutSubdomain = (url = 'https://app.s1seven.com') => {\n  const urlParts = URL.parse(url).hostname.split('.');\n  return urlParts\n    .slice(0)\n    .slice(-(urlParts.length === 4 ? 3 : 2))\n    .join('.');\n}\n\nconst S1SEVEN_BASE_URL = global.get(`S1SEVEN_BASE_URL_${apiConfigNodeName}`);\nconst s1sevenDomain = getDomainWithoutSubdomain(S1SEVEN_BASE_URL);\nflow.set('s1sevenDomain', s1sevenDomain);\n",
      "finalize": "",
      "libs": [
        {
          "var": "URL",
          "module": "url"
        }
      ],
      "x": 210,
      "y": 120,
      "wires": [["bdbb34b54e37366b"], ["8d4b2a81aac3257e"]],
      "outputLabels": ["connect", "fetch access token"]
    },
    {
      "id": "0bc84f386880dfdc",
      "type": "function",
      "z": "3a077bd68754120e",
      "name": "has access token changed ?",
      "func": "if (msg.event === 'has-changed' && msg.value === true) {\n    return msg;\n} ",
      "outputs": 1,
      "noerr": 0,
      "initialize": "",
      "finalize": "",
      "libs": [],
      "x": 620,
      "y": 180,
      "wires": [["bdbb34b54e37366b"]]
    },
    {
      "id": "bdbb34b54e37366b",
      "type": "link out",
      "z": "3a077bd68754120e",
      "name": "broker-out",
      "mode": "link",
      "links": ["ce9e719596dcb7e0"],
      "x": 825,
      "y": 120,
      "wires": []
    },
    {
      "id": "ce9e719596dcb7e0",
      "type": "link in",
      "z": "3a077bd68754120e",
      "name": "broker-in",
      "links": ["bdbb34b54e37366b", "6a9eb4d6d15547f6"],
      "x": 75,
      "y": 340,
      "wires": [["7e6bf0caea59e270"]]
    },
    {
      "id": "3b385aaa9d466c36",
      "type": "status",
      "z": "3a077bd68754120e",
      "name": "",
      "scope": ["4157b664fac0fb5b"],
      "x": 120,
      "y": 500,
      "wires": [[]]
    },
    {
      "id": "4157b664fac0fb5b",
      "type": "mqtt in",
      "z": "3a077bd68754120e",
      "name": "mqtt",
      "topic": "",
      "qos": "1",
      "datatype": "json",
      "broker": "1af551fe7b333713",
      "nl": false,
      "rap": true,
      "rh": 0,
      "inputs": 1,
      "x": 550,
      "y": 340,
      "wires": [[]]
    },
    {
      "id": "8a6608112e0505f3",
      "type": "tls-config",
      "z": "3a077bd68754120e",
      "name": "",
      "cert": "",
      "key": "",
      "ca": "",
      "certname": "",
      "keyname": "",
      "caname": "",
      "servername": "",
      "verifyservercert": false,
      "alpnprotocol": ""
    },
    {
      "id": "f5c697734aa054db",
      "type": "api-config",
      "environment": "staging",
      "name": "test 1",
      "apiVersion": "1"
    },
    {
      "id": "1af551fe7b333713",
      "type": "mqtt-broker",
      "name": "S1SEVEN MQTT",
      "broker": "localhost",
      "port": "1883",
      "tls": "8a6608112e0505f3",
      "clientid": "",
      "autoConnect": false,
      "usetls": false,
      "protocolVersion": "4",
      "keepalive": "60",
      "cleansession": true,
      "birthTopic": "",
      "birthQos": "0",
      "birthPayload": "",
      "birthMsg": {},
      "closeTopic": "",
      "closeQos": "0",
      "closePayload": "",
      "closeMsg": {},
      "willTopic": "",
      "willQos": "0",
      "willPayload": "",
      "willMsg": {},
      "userProps": "",
      "sessionExpiry": ""
    },
    {
      "id": "1adabd3c4b63f029",
      "type": "subflow:3a077bd68754120e",
      "z": "19e657388eeb9f83",
      "name": "",
      "env": [
        {
          "name": "ApiConfigName",
          "value": "test_1",
          "type": "str"
        },
        {
          "name": "Vhost",
          "value": "jbjwikqf",
          "type": "str"
        }
      ],
      "x": 390,
      "y": 720,
      "wires": []
    }
  ]
}
